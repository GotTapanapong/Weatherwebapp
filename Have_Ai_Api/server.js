// ---------------------------
// server.js
// ---------------------------
import express from "express";
import fetch from "node-fetch";
import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env
dotenv.config();

const app = express();
app.use(express.json());

const PORT = process.env.PORT || 3000;
const GEMINI_KEY = process.env.GEMINI_API_KEY;

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

app.use(express.static(path.join(__dirname, "public")));

app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "public", "Main.html"));
});

// ‚úÖ Route ‡∏´‡∏•‡∏±‡∏Å ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å app.js (‡∏ã‡∏∂‡πà‡∏á‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Lambda)
app.post("/weather", async (req, res) => {
    try {
        // app.js ‡∏à‡∏∞‡∏™‡πà‡∏á JSON ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏ó‡∏≤‡∏á body ‡πÄ‡∏ä‡πà‡∏ô { data: { city, weather: {...} } }
        const weatherData = req.body.data?.weather;
        // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ
        const city =
            req.body.data?.city ||
            req.body.city ||
            req.body.data?.weather?.name ||
            "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á";

        if (!weatherData) {
            return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô request body" });
        }

        // üìç ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà app.js ‡∏™‡πà‡∏á‡∏°‡∏≤
        const condition = weatherData.weather[0].description;
        const temp = weatherData.main.temp;
        const humidity = weatherData.main.humidity;
        const wind = weatherData.wind.speed;

        // 1Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ OpenAI
        const prompt = `
        ‡πÄ‡∏°‡∏∑‡∏≠‡∏á: ${city}
        ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: ${condition}
        ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp}¬∞C
        ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity}%
        ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏°: ${wind} m/s
        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50 ‡∏Ñ‡∏≥)
        ‡πÅ‡∏ô‡∏ö‡∏•‡∏¥‡πâ‡∏á‡∏Ñ‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Ñ‡πå‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ
        ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        `;

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Gemini API
        const geminiRes = await fetch(
            `https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent?key=${GEMINI_KEY}`,
            {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    contents: [
                        {
                            parts: [{ text: prompt }],
                        },
                    ],
                }),
            }
        );

        const geminiData = await geminiRes.json();

        console.log("üåê Gemini response:", JSON.stringify(geminiData, null, 2));

        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å Gemini
        let advice =
            geminiData?.candidates?.[0]?.content?.parts?.[0]?.text?.trim() || "";

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Markdown ‡∏Ç‡∏≠‡∏á Gemini
        if (advice) {
            // ‡∏•‡∏ö bullet
            advice = advice.replace(/\n\s*\*/g, " ‚Ä¢"); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô * ‡πÄ‡∏õ‡πá‡∏ô ‚Ä¢
            advice = advice.replace(/\*\s*/g, ""); // ‡∏•‡∏ö * ‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ

            // ‡πÅ‡∏õ‡∏•‡∏á Markdown link
            advice = advice.replace(
                /\[([^\]]+)\]\((https?:\/\/[^\s)]+)\)/g,
                '<a href="$2" target="_blank" class="text-blue-600 underline">$1</a>'
            );

            // ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô [https://example.com] ‚Üí <a href="...">...</a>
            advice = advice.replace(
                /\[(https?:\/\/[^\s\]]+)\]/g,
                '<a href="$1" target="_blank" class="text-blue-600 underline">$1</a>'
            );

            // ‡∏à‡∏±‡∏î‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
            advice = advice.replace(/\n+/g, " "); // ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            advice = advice.replace(/\s{2,}/g, " "); // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô
        }

        // ------------------------------
        // fallback
        // ------------------------------
        if (!advice) {
            const lower = condition.toLowerCase();
            if (condition.includes("‡∏ù‡∏ô") || lower.includes("rain")) {
                advice = "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ù‡∏ô‡∏ï‡∏Å ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏£‡πà‡∏° ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏û‡∏Å‡∏£‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏•‡πà‡∏∞";
            } else if (condition.includes("‡πÄ‡∏°‡∏Ü") || lower.includes("cloud")) {
                advice = "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Ñ‡∏£‡∏∂‡πâ‡∏° ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å‡∏Å‡πá‡∏û‡∏Å‡∏£‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÑ‡∏ß‡πâ‡∏™‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Å‡πá‡∏î‡∏µ‡∏ô‡∏∞";
            } else if (lower.includes("clear")) {
                advice = "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô ‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏°‡∏ß‡∏¥‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á";
            } else if (temp > 30) {
                advice = "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏´‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà‡∏ï‡∏¥‡∏î‡πÅ‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏¢‡πá‡∏ô‡πÜ ‡∏Å‡∏¥‡∏ô‡∏ô‡∏∞";
            } else if (temp < 20) {
                advice = "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏¢‡πá‡∏ô ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏†‡∏π‡πÄ‡∏Ç‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ó‡∏≥‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏≠‡∏∏‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞";
            } else {
                advice = "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ô‡∏∞!";
            }
        }

        // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ß‡πá‡∏ö
        res.json({
            data: { city, weather: weatherData, advice },
            is_from_cache: false,
        });
    } catch (err) {
        console.error("Server Error:", err);
        res.status(500).json({ message: "Server error", error: err.message });
    }
});

// ---------------------------
// Start Server
// ---------------------------
app.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}`);
});
