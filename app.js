// --- 1. [‚ùóÔ∏è‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‚ùóÔ∏è] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡∏ô‡∏µ‡πâ ---
//
// ¬† ¬†‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì "‡∏ß‡∏≤‡∏á" Invoke URL ‡∏Ç‡∏≠‡∏á API Gateway (‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Phase 1.4)
// ¬† ¬†‡∏•‡∏á‡πÉ‡∏ô "" ‡∏ô‡∏µ‡πâ
// ¬† ¬†(‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: [https://xxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod](https://xxxxxxxxx.execute-api.us-east-1.amazonaws.com/prod))
//
const API_BASE_URL = "https://tlx6g1els4.execute-api.us-east-1.amazonaws.com/prod"; // <--- ‚ùóÔ∏è‚ùóÔ∏è ‡∏ß‡∏≤‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ / ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢)


// --- 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Endpoint URLs ---
const WEATHER_API_URL = `${API_BASE_URL}/weather`;   // POST
const TRENDING_API_URL = `${API_BASE_URL}/trending`; // GET
const FORECAST_API_URL = `${API_BASE_URL}/forecast`; // GET

// --- 3. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö HTML Elements ---
document.addEventListener('DOMContentLoaded', () => {
    // ‡∏´‡∏≤ Elements ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const cityInput = document.getElementById('city-input');
    const searchButton = document.getElementById('search-button');
    const loadingSpinner = document.getElementById('loading-spinner');
    const resultsContainer = document.getElementById('results-container');
    const weatherResults = document.getElementById('weather-results');
    const trendingTags = document.getElementById('trending-tags');
    const forecastContainer = document.getElementById('forecast-container');

    // --- 4. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏Æ‡∏¥‡∏ï" (Trending) ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î ---
    fetchTrendingCities();

    // --- 5. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Event Listeners ---
    searchButton.addEventListener('click', handleSearch);
    cityInput.addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
            handleSearch();
        }
    });

    // --- 6. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤) ---
    async function handleSearch() {
        const city = cityInput.value.trim();
        const resultsContainer = document.getElementById("results-container");

        if (!city) {
            alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á");
            return;
        }

        // 1. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° UI
        resultsContainer.style.display = 'none'; // ‡∏ã‡πà‡∏≠‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏Å‡πà‡∏≤
        loadingSpinner.style.display = 'block'; // ‡πÇ‡∏ä‡∏ß‡πå Spinner
        searchButton.disabled = true;

        // 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchWeather ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchForecast
        try {
            // 2.1 ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            const weatherData = await fetchWeather(city);
            displayWeather(weatherData.data, weatherData.is_from_cache);

            // 2.2 ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
            // (‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á city ‡πÑ‡∏õ‡πÉ‡∏ô query string)
            const forecastData = await fetchForecast(city);
            displayForecast(forecastData.data);

            // 2.3 ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏Æ‡∏¥‡∏ï" (Trending)
            // (‡∏ó‡∏≥‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
            await fetchTrendingCities();

            // 2.4 ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            resultsContainer.style.display = 'flex'; // ‡πÇ‡∏ä‡∏ß‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

        } catch (error) {
            console.error("Search error:", error);
            const resultsContainer = document.getElementById("results-container");
            resultsContainer.style.display = "flex";
            displayError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", resultsContainer);
        }
        finally {
            // 3. ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ UI (‡πÄ‡∏™‡∏°‡∏≠)
            loadingSpinner.style.display = 'none'; // ‡∏ã‡πà‡∏≠‡∏ô Spinner
            searchButton.disabled = false; // ‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°
        }
    }

    // --- 7. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô" (POST /weather) ---
    async function fetchWeather(city) {
        const requestBody = { city: city };

        const response = await fetch(WEATHER_API_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requestBody)
        });

        const result = await response.json(); // ‡∏≠‡πà‡∏≤‡∏ô body ‡πÄ‡∏™‡∏°‡∏≠

        if (!response.ok || (result.data && result.data.toString().toLowerCase().includes("city not found"))) {
            const resultsContainer = document.getElementById("results-container");
            resultsContainer.style.display = "flex"; // ‡πÇ‡∏ä‡∏ß‡πå container ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô error
            displayError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", resultsContainer);
            throw new Error("City not found");
        }

        return result; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ { data: {...}, is_from_cache: ... }
    }

    // --- 8. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á "‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®" (GET /forecast) ---
    async function fetchForecast(city) {
        // ‡∏™‡πà‡∏á 'city' ‡πÄ‡∏õ‡πá‡∏ô Query String Parameter
        const urlWithQuery = `${FORECAST_API_URL}?city=${encodeURIComponent(city)}`;

        const response = await fetch(urlWithQuery, {
            method: 'GET'
        });

        const result = await response.json(); // ‡∏≠‡πà‡∏≤‡∏ô body ‡πÄ‡∏™‡∏°‡∏≠

        if (!response.ok) {
            throw new Error(result.data || `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (Forecast): ${response.status}`);
        }

        return result; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ { data: [...] }
    }

    // --- 9. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏Æ‡∏¥‡∏ï" (GET /trending) ---
    async function fetchTrendingCities() {
        try {
            const response = await fetch(TRENDING_API_URL, { method: 'GET' });
            if (!response.ok) {
                const errorBody = await response.json();
                throw new Error(errorBody.data || `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (Trending): ${response.status}`);
            }
            const result = await response.json();
            displayTrending(result.data);

        } catch (error) {
            console.error("Trending error:", error);
            displayTrending(null, error.message); // ‡πÅ‡∏™‡∏î‡∏á Error ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô Trending
        }
    }

    // --- 10. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô" ---
    function displayWeather(data, isFromCache) {
        const weather = data.weather;
        const weatherMain = weather.weather[0].main.toLowerCase();
        const city = weather.name;

        // üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏à‡∏£‡∏¥‡∏á
        const adviceByWeather = {
            clear: [
                {
                    tip: "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ô‡∏µ‡πâ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏∞‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏ï‡∏Å!",
                    place: "click!!",
                    link: "https://aroundbkk.com/30-bangkok-photo-spots/"
                },
                {
                    tip: "‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏µ‡∏ô‡πÄ‡∏Ç‡∏≤ ‡∏ä‡∏°‡∏ß‡∏¥‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏±‡πà‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô!",
                    place: "click!!",
                    link: "https://travel.trueid.net/detail/zr48yEA8Ln6"
                },
                {
                    tip: "‡∏ß‡∏±‡∏ô‡∏î‡∏µ‡πÜ ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡∏´‡∏≤ Rooftop Caf√© ‡∏ä‡∏¥‡∏• ‡πÜ ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‚òï",
                    place: "Rooftop Caf√©",
                    link: "https://www.wongnai.com/restaurants?q=Rooftop%20Caf%C3%A9&cregion=58"
                }
            ],
            clouds: [
                {
                    tip: "‡∏ü‡πâ‡∏≤‡∏Ñ‡∏£‡∏∂‡πâ‡∏°‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡∏ô‡∏±‡πà‡∏á‡∏ä‡∏¥‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü‡∏™‡∏ß‡∏¢ ‡πÜ ‡∏Å‡πá‡∏î‡∏µ‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢",
                    place: "Cafe",
                    link: "https://www.wongnai.com/restaurants?categoryGroupId=10&_pd=eyJzcGF0aWFsSW5mby5jb29yZGluYXRlLmxhdGl0dWRlIjoxMy43MjYxODYyNDY3MDkyNTgsInNwYXRpYWxJbmZvLmNvb3JkaW5hdGUubG9uZ2l0dWRlIjoxMDAuNzcwMzIyNzM2MzgwMTUsInNwYXRpYWxJbmZvLnJhZGl1cyI6NTB9"
                },
                {
                    tip: "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏¢‡πá‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡∏•‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏£‡∏¥‡∏°‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏£‡∏±‡∏ö‡∏•‡∏°‡∏™‡∏ö‡∏≤‡∏¢ ‡πÜ",
                    place: "‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞",
                    link: "https://www.wongnai.com/nearby/businesses?categories=4418&domain=4"
                }
            ],
            rain: [
                {
                    tip: "‡∏ù‡∏ô‡∏ï‡∏Å‡πÄ‡∏ö‡∏≤ ‡πÜ ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏∏‡πà‡∏ô ‡πÜ ‡∏à‡∏¥‡∏ö‡πÇ‡∏Å‡πÇ‡∏Å‡πâ‡∏î‡∏π Netflix ‚òî",
                    place: "Home",
                    link: "https://www.netflix.com/th/"
                },
                {
                    tip: "‡∏ù‡∏ô‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å‡∏ô‡∏∞! ‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏£‡πà‡∏≠‡∏¢ ‡πÜ ‡∏°‡∏≤‡∏Å‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏Å‡∏±‡∏ô üçú",
                    place: "Home",
                    link: "https://www.grab.com/th/"
                }
            ],
            thunderstorm: [
                {
                    tip: "‡∏ü‡πâ‡∏≤‡∏£‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô ‚ö°",
                    place: "-",
                    link: "https://"
                }
            ],
            snow: [
                {
                    tip: "‡∏´‡∏¥‡∏°‡∏∞‡∏ï‡∏Å‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡∏≠‡∏∏‡πà‡∏ô‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï‡∏£‡πâ‡∏≠‡∏ô‡∏™‡∏±‡∏Å‡πÅ‡∏Å‡πâ‡∏ß üç´",
                    place: "‡∏£‡πâ‡∏≤‡∏ô Caf√© Kitsun√© Tokyo",
                    link: "https://www.google.com/"
                }
            ]
        };

        const defaultAdvice = [
            {
                tip: "‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏™‡∏ô‡∏∏‡∏Å‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà üí™",
                place: "‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ö‡πâ‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞",
                link: "https://www.google.com/"
            }
        ];

        const selectedCategory = adviceByWeather[weatherMain] || defaultAdvice;
        const randomAdvice = selectedCategory[Math.floor(Math.random() * selectedCategory.length)];

        const iconCode = weather.weather[0].icon;
        const iconUrl = `https://openweathermap.org/img/wn/${iconCode}@4x.png`;

        const cacheStatus = isFromCache
            ? '<p class="text-sm text-center text-green-700 font-semibold">(‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Cache)</p>'
            : '<p class="text-sm text-center text-blue-700 font-semibold">(‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏î‡πÉ‡∏´‡∏°‡πà)</p>';

        // ‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ï‡∏≤‡∏° Timezone ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
        const now = new Date();
        const formattedDate = now.toLocaleDateString('th-TH', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        const formattedTime = now.toLocaleTimeString('th-TH', {
            hour: '2-digit',
            minute: '2-digit'
        });

        const weatherHTML = `
            <div class="p-6 rounded-lg text-center">
                ${cacheStatus}
                <h2 class="mt-1 text-3xl font-bold text-gray-800">${weather.name}, ${weather.sys.country}</h2>
                <p class="text-sm text-gray-600 mt-1">${formattedDate} ‡πÄ‡∏ß‡∏•‡∏≤ ${formattedTime}</p>
                <div class="flex items-center justify-center -my-4">
                    <img src="${iconUrl}" alt="${weather.weather[0].description}" class="h-40">
                    <p class="text-5xl font-bold text-gray-900">${Math.round(weather.main.temp)}¬∞C</p>
                </div>
                <p class="text-xl text-gray-700 capitalize -mt-4">${weather.weather[0].description}</p>
                <p class="text-lg text-gray-600 mt-2">
                    ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô: ${Math.round(weather.main.feels_like)}¬∞C
                </p>
            </div>
            <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-800 p-4 rounded-lg shadow space-y-2">
                <p class="text-lg font-bold">üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ :</p>
                <p>${randomAdvice.tip}</p>
                <p class="text-sm text-gray-700">üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ : 
                    <a href="${randomAdvice.link}" target="_blank" class="text-indigo-600 font-semibold underline hover:text-indigo-800 transition">
                        ${randomAdvice.place}
                    </a>
                </p>
            </div>

            <div class="grid grid-cols-2 gap-4 text-center">
                <div class="bg-white p-4 rounded-lg">
                    <p class="text-gray-500">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô</p>
                    <p class="text-2xl font-bold">${weather.main.humidity}%</p>
                </div>
                <div class="bg-white p-4 rounded-lg">
                    <p class="text-gray-500">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏°</p>
                    <p class="text-2xl font-bold">${weather.wind.speed} m/s</p>
                </div>
            </div>
        `;

        weatherResults.innerHTML = weatherHTML;
    }

    // --- 11. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• "‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®" ---
    function displayForecast(forecastList) {
        // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 5 ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
        const today = new Date().toISOString().split('T')[0];
        const next5Days = forecastList.filter(item => item.date !== today).slice(0, 5);

        if (next5Days.length === 0) {
            forecastContainer.innerHTML = '<p class="text-center text-gray-500">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤</p>';
            return;
        }

        let forecastHTML = '<h3 class="text-2xl font-bold text-gray-800 mb-4 text-center">‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏® 5 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤</h3>';
        forecastHTML += '<div class="flex flex-col gap-3">';

        next5Days.forEach(day => {
            const iconUrl = `https://openweathermap.org/img/wn/${day.weather_icon}@2x.png`;
            forecastHTML += `
                <div class="flex items-center justify-between bg-white/70 p-2 rounded-lg">
                    <div class="flex items-center gap-3">
                        <p class="font-bold text-lg text-gray-800">${day.day_name}</p>
                        <img src="${iconUrl}" alt="${day.description}" class="w-16 h-16 mx-auto">
                    </div>
                    <div class="text-right">
                        <p class="text-xl font-bold text-gray-900">${Math.round(day.temp_max)}¬∞</p>
                        <p class="text-gray-600">${Math.round(day.temp_min)}¬∞</p>
                    </div>
                </div>
                <hr>
            `;
        });

        forecastHTML += '</div>';
        forecastContainer.innerHTML = forecastHTML;
    }

    // --- 12. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏Æ‡∏¥‡∏ï" ---
    function displayTrending(trendingList, error = null) {
        if (error) {
            trendingTags.innerHTML = `<p class="text-red-500 text-sm">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏Æ‡∏¥‡∏ï‡πÑ‡∏î‡πâ</p>`;
            return;
        }

        if (!trendingList || trendingList.length === 0) {
            trendingTags.innerHTML = `<p class="text-gray-500 text-sm">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</p>`;
            return;
        }

        trendingTags.innerHTML = trendingList.map(item => {
            return `<button class="trending-tag bg-gray-200 text-gray-700 px-3 py-1 rounded-full text-sm hover:bg-indigo-200 transition">
                        ${item.city_name}
                    </button>`;
        }).join('');

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° Event Listeners ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
        document.querySelectorAll('.trending-tag').forEach(tag => {
            tag.addEventListener('click', () => {
                // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á (‡∏ï‡∏±‡∏î‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡∏≠‡∏≠‡∏Å)
                const city = tag.innerText.split(' (')[0];
                cityInput.value = city; // ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                handleSearch(); // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏•‡∏¢
            });
        });
    }

    // --- 13. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Error (‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ) ---
    function displayError(message, element) {
        const errorHTML = `
            <div class="flex items-center justify-center w-full">
                <div class="bg-red-100 border-l-4 border-red-500 text-red-800 p-6 rounded-xl shadow-lg text-center max-w-xl">
                    <p class="text-lg font-bold mb-2">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!</p>
                    <p>${message}</p>
                </div>
            </div>
        `;
        element.innerHTML = errorHTML;
    }
});

